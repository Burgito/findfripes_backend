// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using findfripes_dotnet.Database;

#nullable disable

namespace findfripes_dotnet.Migrations
{
    [DbContext(typeof(PgFindfripesContext))]
    [Migration("20240515205929_data_migration_dev")]
    partial class data_migration_dev
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("line_1");

                    b.Property<string>("Line2")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("line_2");

                    b.Property<string>("Line3")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("line_3");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("post_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("addresses_pkey");

                    b.ToTable("addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Johannaside",
                            Country = "Mozambique",
                            Line1 = "75171 Wuckert Village",
                            PostCode = "10145"
                        },
                        new
                        {
                            Id = 2,
                            City = "Dylanport",
                            Country = "Singapore",
                            Line1 = "8304 Nicklaus Crossroad",
                            PostCode = "32488-5789"
                        },
                        new
                        {
                            Id = 3,
                            City = "East Electa",
                            Country = "Papua New Guinea",
                            Line1 = "380 Garland Forge",
                            PostCode = "84674"
                        },
                        new
                        {
                            Id = 4,
                            City = "West Keira",
                            Country = "Australia",
                            Line1 = "80845 Mitchell Plain",
                            PostCode = "77992-5304"
                        },
                        new
                        {
                            Id = 5,
                            City = "Estebanstad",
                            Country = "Virgin Islands, U.S.",
                            Line1 = "91711 Greenfelder Manor",
                            PostCode = "20236-9004"
                        },
                        new
                        {
                            Id = 6,
                            City = "Hellerview",
                            Country = "Libyan Arab Jamahiriya",
                            Line1 = "10736 Frami Bridge",
                            PostCode = "96066"
                        },
                        new
                        {
                            Id = 7,
                            City = "Dianahaven",
                            Country = "Costa Rica",
                            Line1 = "0710 Littel Harbor",
                            PostCode = "70114-2036"
                        },
                        new
                        {
                            Id = 8,
                            City = "Gusikowskiport",
                            Country = "Lebanon",
                            Line1 = "51138 Gertrude Locks",
                            PostCode = "32869-5234"
                        },
                        new
                        {
                            Id = 9,
                            City = "Lake Kiley",
                            Country = "Israel",
                            Line1 = "23931 Durgan Street",
                            PostCode = "55858"
                        },
                        new
                        {
                            Id = 10,
                            City = "Rempelfurt",
                            Country = "Saudi Arabia",
                            Line1 = "3104 Cassin Junctions",
                            PostCode = "12050"
                        },
                        new
                        {
                            Id = 11,
                            City = "New Shawna",
                            Country = "Democratic People's Republic of Korea",
                            Line1 = "260 McCullough Station",
                            PostCode = "56729-1169"
                        },
                        new
                        {
                            Id = 12,
                            City = "Edwardmouth",
                            Country = "Trinidad and Tobago",
                            Line1 = "6256 Ford Fields",
                            PostCode = "17165-4920"
                        },
                        new
                        {
                            Id = 13,
                            City = "Bernhardstad",
                            Country = "Peru",
                            Line1 = "92799 Phyllis Mountain",
                            PostCode = "22197-9706"
                        },
                        new
                        {
                            Id = 14,
                            City = "West Keanu",
                            Country = "Croatia",
                            Line1 = "308 Damaris Extension",
                            PostCode = "98287"
                        },
                        new
                        {
                            Id = 15,
                            City = "West Newellland",
                            Country = "Italy",
                            Line1 = "730 Wiley Manor",
                            PostCode = "64649"
                        },
                        new
                        {
                            Id = 16,
                            City = "Rowestad",
                            Country = "Mauritania",
                            Line1 = "584 Hudson Islands",
                            PostCode = "69478-7205"
                        },
                        new
                        {
                            Id = 17,
                            City = "Jadeberg",
                            Country = "Virgin Islands, U.S.",
                            Line1 = "990 Hintz Divide",
                            PostCode = "54772"
                        },
                        new
                        {
                            Id = 18,
                            City = "Edenbury",
                            Country = "Finland",
                            Line1 = "45060 Skye Stream",
                            PostCode = "57968"
                        },
                        new
                        {
                            Id = 19,
                            City = "Howemouth",
                            Country = "Colombia",
                            Line1 = "4877 Jakubowski Hills",
                            PostCode = "31358"
                        },
                        new
                        {
                            Id = 20,
                            City = "Noeliastad",
                            Country = "Chad",
                            Line1 = "862 Kaela Squares",
                            PostCode = "93505-9905"
                        },
                        new
                        {
                            Id = 21,
                            City = "South Dixieton",
                            Country = "France",
                            Line1 = "122 Kautzer Crossroad",
                            PostCode = "78180"
                        },
                        new
                        {
                            Id = 22,
                            City = "North Sistertown",
                            Country = "Algeria",
                            Line1 = "93185 Kutch Mount",
                            PostCode = "27166"
                        },
                        new
                        {
                            Id = 23,
                            City = "Deckowfort",
                            Country = "Slovenia",
                            Line1 = "8806 Elinor Corners",
                            PostCode = "40914-4237"
                        },
                        new
                        {
                            Id = 24,
                            City = "East Melynaport",
                            Country = "Austria",
                            Line1 = "43485 Dee Village",
                            PostCode = "34063"
                        },
                        new
                        {
                            Id = 25,
                            City = "Jacobsontown",
                            Country = "Samoa",
                            Line1 = "2771 Elise Via",
                            PostCode = "45714"
                        },
                        new
                        {
                            Id = 26,
                            City = "South Cayla",
                            Country = "New Caledonia",
                            Line1 = "78936 Rosalinda Streets",
                            PostCode = "37763-1953"
                        },
                        new
                        {
                            Id = 27,
                            City = "South Ernestina",
                            Country = "Belgium",
                            Line1 = "527 Brittany Islands",
                            PostCode = "08219"
                        },
                        new
                        {
                            Id = 28,
                            City = "New Gina",
                            Country = "Iraq",
                            Line1 = "30373 Russel Forge",
                            PostCode = "03998-9026"
                        },
                        new
                        {
                            Id = 29,
                            City = "Terranceton",
                            Country = "Spain",
                            Line1 = "737 Oswaldo Skyway",
                            PostCode = "19077-5114"
                        },
                        new
                        {
                            Id = 30,
                            City = "Jonathanstad",
                            Country = "Cape Verde",
                            Line1 = "69898 Savion Mission",
                            PostCode = "34099"
                        },
                        new
                        {
                            Id = 31,
                            City = "East Jerrod",
                            Country = "Madagascar",
                            Line1 = "70251 Josue Ferry",
                            PostCode = "38529-0059"
                        },
                        new
                        {
                            Id = 32,
                            City = "Orlandberg",
                            Country = "Lithuania",
                            Line1 = "643 Dewayne Points",
                            PostCode = "31765"
                        },
                        new
                        {
                            Id = 33,
                            City = "South Vedachester",
                            Country = "Bahamas",
                            Line1 = "7690 Jefferey Hills",
                            PostCode = "24117-2674"
                        },
                        new
                        {
                            Id = 34,
                            City = "Volkmanburgh",
                            Country = "Guernsey",
                            Line1 = "61853 Kerluke Isle",
                            PostCode = "44744"
                        },
                        new
                        {
                            Id = 35,
                            City = "South Jerrold",
                            Country = "Haiti",
                            Line1 = "903 Shayne Park",
                            PostCode = "05885-4857"
                        },
                        new
                        {
                            Id = 36,
                            City = "North Bert",
                            Country = "Ethiopia",
                            Line1 = "175 Kaitlyn Walk",
                            PostCode = "76477"
                        },
                        new
                        {
                            Id = 37,
                            City = "East Lilianeview",
                            Country = "Macedonia",
                            Line1 = "5663 Magdalena Meadows",
                            PostCode = "11585"
                        },
                        new
                        {
                            Id = 38,
                            City = "West Jamesonbury",
                            Country = "Venezuela",
                            Line1 = "1548 Bradtke Burg",
                            PostCode = "35807"
                        },
                        new
                        {
                            Id = 39,
                            City = "Drakeborough",
                            Country = "Egypt",
                            Line1 = "025 Baumbach Stream",
                            PostCode = "23920-9280"
                        },
                        new
                        {
                            Id = 40,
                            City = "South Aubree",
                            Country = "Virgin Islands, British",
                            Line1 = "6327 Drake Parks",
                            PostCode = "16283"
                        },
                        new
                        {
                            Id = 41,
                            City = "Port Curtland",
                            Country = "Central African Republic",
                            Line1 = "06864 Mitchell Prairie",
                            PostCode = "37125"
                        },
                        new
                        {
                            Id = 42,
                            City = "Leuschkemouth",
                            Country = "Czech Republic",
                            Line1 = "054 Buckridge Curve",
                            PostCode = "13525"
                        },
                        new
                        {
                            Id = 43,
                            City = "South Jarredfort",
                            Country = "Mexico",
                            Line1 = "3840 Greenholt Locks",
                            PostCode = "21387"
                        },
                        new
                        {
                            Id = 44,
                            City = "Carolanneshire",
                            Country = "Greece",
                            Line1 = "21952 Kraig Island",
                            PostCode = "62119-6056"
                        },
                        new
                        {
                            Id = 45,
                            City = "Harveychester",
                            Country = "China",
                            Line1 = "1916 Powlowski Street",
                            PostCode = "58787"
                        },
                        new
                        {
                            Id = 46,
                            City = "Lake Turner",
                            Country = "Lesotho",
                            Line1 = "889 Sporer Course",
                            PostCode = "29653"
                        },
                        new
                        {
                            Id = 47,
                            City = "Ryanbury",
                            Country = "Western Sahara",
                            Line1 = "791 Raymond Radial",
                            PostCode = "56648-3079"
                        },
                        new
                        {
                            Id = 48,
                            City = "New Emmet",
                            Country = "Western Sahara",
                            Line1 = "20129 Prince Tunnel",
                            PostCode = "37235-4621"
                        },
                        new
                        {
                            Id = 49,
                            City = "New Donnyshire",
                            Country = "French Guiana",
                            Line1 = "3414 Rodriguez Village",
                            PostCode = "10564-0533"
                        },
                        new
                        {
                            Id = 50,
                            City = "Friesenburgh",
                            Country = "Myanmar",
                            Line1 = "251 Herta Haven",
                            PostCode = "76469"
                        });
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FFUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.Fripe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GpsCoordinates")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gps_coordinates");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("long_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("short_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("fripes_pkey");

                    b.HasIndex("AddressId");

                    b.ToTable("fripes", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FripeId")
                        .HasColumnType("integer")
                        .HasColumnName("fripe_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("fripe_comments_pkey");

                    b.HasIndex("FripeId");

                    b.HasIndex("UserId");

                    b.ToTable("fripe_comments", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripePicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filename");

                    b.Property<int?>("FripeId")
                        .HasColumnType("integer")
                        .HasColumnName("fripe_id");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("short_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("fripe_pictures_pkey");

                    b.HasIndex("FripeId");

                    b.ToTable("fripe_pictures", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripeProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FripeId")
                        .HasColumnType("integer")
                        .HasColumnName("fripe_id");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("product_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("fripe_product_categories_pkey");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex(new[] { "FripeId", "ProductCategoryId" }, "fripe_product_categories_fripe_id_product_category_id_unique")
                        .IsUnique();

                    b.ToTable("fripe_product_categories", (string)null);
                });

            modelBuilder.Entity("findfripes_dotnet.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IconFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("icon_filename");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("long_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("short_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("product_categories_pkey");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.FFUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.FFUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("findfripes_dotnet.Models.FFUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.FFUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FFUser", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.Fripe", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.Address", "Address")
                        .WithMany("Fripes")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fripes_address_id_foreign");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripeComment", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.Fripe", "Fripe")
                        .WithMany("FripeComments")
                        .HasForeignKey("FripeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fripe_comments_fripe_id_foreign");

                    b.HasOne("findfripes_dotnet.Models.FFUser", "User")
                        .WithMany("FripeComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fripe_comments_user_id_foreign");

                    b.Navigation("Fripe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripePicture", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.Fripe", "Fripe")
                        .WithMany("FripePictures")
                        .HasForeignKey("FripeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fripe_pictures_fripe_id_foreign");

                    b.Navigation("Fripe");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FripeProductCategory", b =>
                {
                    b.HasOne("findfripes_dotnet.Models.Fripe", "Fripe")
                        .WithMany("FripeProductCategories")
                        .HasForeignKey("FripeId")
                        .HasConstraintName("fripe_product_categories_fripe_id_foreign");

                    b.HasOne("findfripes_dotnet.Models.ProductCategory", "ProductCategory")
                        .WithMany("FripeProductCategories")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("fripe_product_categories_product_category_id_foreign");

                    b.Navigation("Fripe");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.Address", b =>
                {
                    b.Navigation("Fripes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.FFUser", b =>
                {
                    b.Navigation("FripeComments");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.Fripe", b =>
                {
                    b.Navigation("FripeComments");

                    b.Navigation("FripePictures");

                    b.Navigation("FripeProductCategories");
                });

            modelBuilder.Entity("findfripes_dotnet.Models.ProductCategory", b =>
                {
                    b.Navigation("FripeProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
